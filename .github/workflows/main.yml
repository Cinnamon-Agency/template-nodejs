name: CI/CD Pipeline

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables and create .env
        uses: ./.github/actions/setup-env

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build

  deploy:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables and create .env
        uses: ./.github/actions/setup-env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build-image
        run: |
          echo "Commit hash: ${{ env.COMMIT_HASH }}"
          IMAGE_TAG=${{ env.COMMIT_HASH }}
          echo "ECR Repository: ${{ env.ECR_REPOSITORY }}"
          docker build -t ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Deploy to Docker Swarm
        run: |
          trap 'rm -f prod_ssh_key.pem staging_ssh_key.pem' EXIT
          
          if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
            echo "${{ secrets.PROD_SSH_KEY }}" > prod_ssh_key.pem
            chmod 600 prod_ssh_key.pem
          
            ssh -o StrictHostKeyChecking=no -i prod_ssh_key.pem ubuntu@${{ secrets.PRODUCTION_HOST }} "
                if ! docker info 2>/dev/null | grep -q "Swarm: active"; then
                  echo "Swarm not initialized. Initializing..."
                  docker swarm init
                fi
                echo \"Creating or updating docker-compose.production.yml...\"
                printf \"version: \\\"3.8\\\"\\nservices:\\n  ${PROJECT_NAME}:\\n    image: ${{ env.ECR_REPOSITORY }}:${{ env.COMMIT_HASH }}\\n    deploy:\\n      mode: replicated\\n      replicas: 1\\n      restart_policy:\\n        condition: any\\n    ports:\\n      - \\\"80:${{ env.PORT }}\\\"\\n\" > ./docker-compose.production.yml
                docker container prune -f
                docker image prune -a -f
                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 296039129855.dkr.ecr.us-east-1.amazonaws.com
                docker pull ${{ env.ECR_REPOSITORY }}:${{ env.COMMIT_HASH }}
                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 296039129855.dkr.ecr.us-east-1.amazonaws.com
                docker stack deploy -c ./docker-compose.production.yml prod_stack
      
            "
          
          elif [ "${{ env.ENVIRONMENT }}" = "staging" ]; then
            echo "${{ secrets.STAGING_SSH_KEY }}" > staging_ssh_key.pem
            chmod 600 staging_ssh_key.pem
          
            ssh -o StrictHostKeyChecking=no -i staging_ssh_key.pem ubuntu@${{ secrets.STAGING_HOST }} "
              if ! docker info 2>/dev/null | grep -q 'Swarm: active'; then
                echo 'Swarm not initialized. Initializing...'
                docker swarm init
              fi
              echo \"Creating or updating docker-compose.staging.yml...\"
              printf \"version: \\\"3.8\\\"\\nservices:\\n  ${PROJECT_NAME}:\\n    image: ${{ env.ECR_REPOSITORY }}:${{ env.COMMIT_HASH }}\\n    deploy:\\n      mode: replicated\\n      replicas: 1\\n      restart_policy:\\n        condition: any\\n    ports:\\n      - \\\"80:${{ env.PORT }}\\\"\\n\" > ./docker-compose.staging.yml
              docker container prune -f
              docker image prune -a -f
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 296039129855.dkr.ecr.us-east-1.amazonaws.com
              docker pull ${{ env.ECR_REPOSITORY }}:${{ env.COMMIT_HASH }}
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 296039129855.dkr.ecr.us-east-1.amazonaws.com
              docker stack deploy -c ./docker-compose.staging.yml staging_stack
            "
          else
            echo "Unknown environment. Exiting."
            exit 1
          fi
